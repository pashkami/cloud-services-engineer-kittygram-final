name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action (plan, apply, destroy)"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
          - deploy

env:
  TF_VAR_yc_zone: ${{ secrets.YC_ZONE }}
  TF_VAR_yc_token: ${{ secrets.YC_TOKEN }}
# TF_VAR_yc_service_account_key: ${{ secrets.YC_SA_KEY }}
  TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
  TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
  TF_VAR_yc_access_key: ${{ secrets.YC_ACCESS_KEY }}
  TF_VAR_yc_secret_key: ${{ secrets.YC_SECRET_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.7"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="access_key=$TF_VAR_yc_access_key" \
            -backend-config="secret_key=$TF_VAR_yc_secret_key" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false -out=tfplan
        continue-on-error: false

      - name: Upload Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ github.workspace }}/infra/tfplan
          retention-days: 1
          if-no-files-found: error

      - name: Terraform Apply
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          terraform apply -input=false -auto-approve

      - name: Terraform Outputs
        if: ${{ github.event.inputs.action == 'apply' && success() || 'deploy'  }}
        run: |
          OUTPUT=$(terraform output -raw vm_ip)
          echo "SERVER_HOST=${OUTPUT}" >> $env:GITHUB_ENV

      - name: Save VM IP to Artifact
        if: ${{ github.event.inputs.action == 'apply' && success() || 'deploy'  }}
        working-directory: ./infra
        run: |
          terraform output -raw vm_ip > vm_ip.txt
        shell: bash

      - name: Upload VM IP Artifact
        if: ${{ github.event.inputs.action == 'apply' && success() || 'deploy' }}
        uses: actions/upload-artifact@v4
        with:
          name: vm-ip_artifact
          path: ${{ github.workspace }}/infra/vm_ip.txt
          retention-days: 1

      - name: Terraform Destroy
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -input=false -auto-approve
  
  
  backend-tests:
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    needs: terraform
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt

      - name: Test with flake8 and django tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  build_backend_and_push_to_docker_hub:
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    needs: backend-tests
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest

  frontend_tests:
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd frontend/
          npm ci

      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  build_frontend_and_push_to_docker_hub:
    if: ${{ github.event.inputs.action == 'deploy'}}
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    if: ${{ github.event.inputs.action == 'deploy'}}
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    needs:
      # Дождёмся билда всех фронтенда, бэкенда и гейтвея:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Download VM IP
        uses: actions/download-artifact@v4
        with:
          name: vm-ip_artifact
          
      - name: Read VM IP
        id: read-ip
        run: |
          VM_IP=$(cat vm_ip.txt)
          echo "VM_IP=${VM_IP}" >> $GITHUB_ENV
          echo "IP адрес виртуальной машины: ${VM_IP}"

      - name: Checkout repo
        uses: actions/checkout@v3
      # Копируем docker-compose.production.yml на продакшен-сервер:
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        # Передаём параметры для action appleboy/scp-action:
        with:
          host: ${{ env.VM_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram-app"

      # Создаем .env файл на продакшен-сервере
      - name: Create .env file via ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.VM_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > kittygram-app/.env
            echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" >> kittygram-app/.env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> kittygram-app/.env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> kittygram-app/.env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> kittygram-app/.env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> kittygram-app/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> kittygram-app/.env
            echo "DEBUG=${{ secrets.DEBUG }}" >> kittygram-app/.env
      
      - name: Install Docker on remote server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.VM_IP }}
          username: devuser
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo usermod -aG docker ubuntu
              sudo systemctl enable docker
              echo "Docker installed successfully"
            else
              echo "Docker is already installed"
            fi

            # Проверяем версию Docker
            docker --version
            docker compose version
      
      
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.VM_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          # Параметр script передаёт в action appleboy/ssh-action команды,
          # которые нужно выполнить на сервере,
          # с которым установлено соединение:
          script: |
            cd kittygram-app
            # Выполняет pull образов с Docker Hub
            sudo docker compose -f docker-compose.production.yml pull
            # Перезапускает все контейнеры в Docker Compose
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            # Выполняет миграции и сбор статики
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            
#            sudo docker compose -f docker-compose.production.yml exec backend cp -r /backend/collected_static/. /backend_static/static/

  auto_tests:
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./tests/requirements.txt

      - name: Test with pytest
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest ./tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

  send_message:
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    needs: 
      - deploy
      - auto_tests
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Деплой завершён!
            Коты в здании!
            - Автор: ${{ github.actor }}
            - Коммит: ${{ github.event.commits[0].message }}
            - [Ссылка на коммит](https://github.com/${{ github.repository }}/commit/${{ github.sha }})