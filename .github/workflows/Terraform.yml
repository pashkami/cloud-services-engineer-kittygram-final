name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action (plan, apply, destroy)"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VAR_yc_zone: ${{ secrets.YC_ZONE }}
  TF_VAR_yc_token: ${{ secrets.YC_TOKEN }}
  TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
  TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
  TF_VAR_yc_access_key: ${{ secrets.YC_ACCESS_KEY }}
  TF_VAR_yc_secret_key: ${{ secrets.YC_SECRET_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.7"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="access_key=$TF_VAR_yc_access_key" \
            -backend-config="secret_key=$TF_VAR_yc_secret_key" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false -out=tfplan
        continue-on-error: false

      - name: Upload Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ github.workspace }}/infra/tfplan
          retention-days: 1
          if-no-files-found: error

      - name: Terraform Apply
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          terraform apply -input=false -auto-approve

      - name: Terraform Outputs
        if: ${{ github.event.inputs.action == 'apply' && success() }}
        run: |
          OUTPUT=$(terraform output -raw vm_ip)
          echo "SERVER_HOST=${OUTPUT}" >> $env:GITHUB_ENV

      - name: Save IP to S3
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          terraform output -raw vm_ip > vm_ip.txt
          aws s3 cp vm_ip.txt s3://my-kittygram-bucket/vm_ip.txt
          echo "IP сохранен в S3"

      - name: Terraform Destroy
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -input=false -auto-approve
